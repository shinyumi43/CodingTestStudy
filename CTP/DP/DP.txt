다이나믹 프로그래밍(DP)

Top-down, Bottom-up

큰 문제를 작은 문제로 나눠서 풀이
크다 작다는 입력의 상대적인 크기를 의미

부분 문제를 이용해서 큰 문제를 해결할 수 있는데
그 부분 문제를 반복해서 풀어야 하는 경우

Ex) 피보나치 수열
구하고자 하는 것 F7(7번째 항)
F7을 구하기 위해 F5, F6이 필요
    F5는 F3, F4
    F6은 F4, F5
    ...

상대적으로 작은 값의 항을 알고 있다면, 큰 항을 구할 수 있음
그렇지만, F4를 2번 물어보는 문제가 발생
같은 작업을 반복해서 시키는 것에 대한 불만
이와 같은 경우에 사용하는 것이 DP

주로 재귀함수로 DP를 구현
반복되는 연산을 피하기 위해 작은 문제의 결과값을 저장
Ex) 1로 만들기 - Top-down

반복문으로 구현, 작은 문제부터 시작해서 올라감
Ex) 1로 만들기 - Bottom-up

시간과 메모리 측면에서 어떤 것이 좋냐고 물으면, 문제마다 다르다고 얘기

점화식을 짜는 방법
수학적 귀납법과 같음

숫자가 작아지기만 함, 작은 수에서 1로 가는 최단 경로를 알면, 더 큰 수부터 1로 가는 최단경로를 알 수 있음
top-down 방식, bottom-up 방식이 존재
DP 점화식은 분류를 하면 되는 것, 그리고 점화식이 너무 복잡하면, 풀어서 쓸 수 있도록 계산
